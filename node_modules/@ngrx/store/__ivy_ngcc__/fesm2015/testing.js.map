{"version":3,"file":"testing.js","sources":["../testing/src/mock_state.ts","../testing/src/tokens.ts","../testing/src/mock_store.ts","../testing/src/mock_reducer_manager.ts","../testing/src/testing.ts","../testing/testing.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA;AAAI;AAAe;;;AAInB,MAAa,SAAwB,SAAQ,eAAkB;AAC/D,IAAE;AACF,QAAI,KAAK,oBAAI,EAAE,GAAC,CAAC;AACjB,KAAG;AACH;qCALC,UAAU;2FACT;AAAC;AAAmB;;;gDAAoC;AAAC;AAAC;AAAI;AAElD;AAG6F;ACT3G;AAEA,MAAa,cAAc,GAAG,IAAI,cAAc,CAAC,4BAA4B,CAAC;AAC9E;AAAC;AAAI;AAAkC;AAAqH;ACc5J,IAAI,OAAO,SAAS,KAAK,UAAU,EAAE;AACrC,IAAE,SAAS;AAAM;AAEX;AAAQ,IAFF;AACZ,QAAI,IAAI;AACR;AAA6B,kBAAjB,KAAK,sBAAG,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,EAAkB;AACxD,YAAM,IAAI,KAAK,IAAI,gBAAgB,IAAI,KAAK,EAAE;AAC9C,gBAAQ,KAAK,CAAC,cAAc,EAAE,CAAC;AAC/B,aAAO;AACP,SAAK;AAAC,QAAA,WAAM,GAAE;AACd,KAAG,EAAC,CAAC;AACL,CAAC;AACD;AACG;AACC;AAAJ,MAAa,SAAa,SAAQ,KAAQ;AAC1C;AAAQ;AACL;AACqB;AACA;AACjB;AAGiB;AAAQ,IAG9B,YACU,MAAoB,EAC5B,eAA+B,EAC/B,cAA8B,EACC,YAAe,EACtB,aAA8B;AACvD,QACC,KAAK,CAAC,MAAM,EAAE,eAAe,EAAE,cAAc,CAAC,CAAC;AACnD,QAPY,WAAM,GAAN,MAAM,CAAc;AAAC,QAGE,iBAAY,GAAZ,YAAY,CAAG;AAAC,QAI/C,IAAI,CAAC,cAAc,EAAE,CAAC;AAC1B,QAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;AACrC,QAAI,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC,YAAY,EAAE,CAAC;AAC1D,QAAI,IAAI,aAAa,EAAE;AACvB,YAAM,aAAa,CAAC,OAAO;AAAM;AACP;AACrB;AAAgB,YAFO,YAAY;AACxC;AAAiC,sBAAnB,QAAQ,GAAG,YAAY,CAAC,QAAQ;AAC9C,gBAAQ,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;AAC1C,oBAAU,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,YAAY,CAAC,KAAK,CAAC,CAAC;AAC9D,iBAAS;AAAC,qBAAK;AACf,oBAAU,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,YAAY,CAAC,KAAK,CAAC,CAAC;AAC9D,iBAAS;AACT,aAAO,EAAC,CAAC;AACT,SAAK;AACL,KAAG;AACH;AACO;AACL;AAAmB;AAAQ,IAD3B,QAAQ,CAAC,SAAY;AAAI,QACvB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AAChC,QAAI,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;AAC/B,KAAG;AACH;AACO;AACJ;AACK;AACM;AAAmB;AAC/B,IAQA,gBAAgB,CACd,QAG4C,EAC5C,KAAU;AACX,QACC,SAAS,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;AAC7C,QACI,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;AACtC;AAA6B,kBAAjB,cAAc,GAAG,cAAc;AAAM;AAE1C;AAAgB,YAFqB,SAAQ;AAAQ;AAE1C;AACb,YAHiD,MAAM,KAAK,EAAC;AAClE,YACM,OAAO,cAAc,CAAC;AAC5B,SAAK;AACL,QACI,QAAQ,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;AAC9B,QACI,OAAO,QAAQ,CAAC;AACpB,KAAG;AACH;AACO;AACF;AAAQ,IADX,cAAc;AAChB,QAAI,SAAS,CAAC,SAAS,CAAC,OAAO;AAAM;AAC3B;AAA+B;AACnB;AAChB,QAH0B,CAAC,CAAC,EAAE,QAAQ;AAC5C,YAAM,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;AACxC,gBAAQ,QAAQ,CAAC,OAAO,EAAE,CAAC;AAC3B,gBAAQ,QAAQ,CAAC,SAAS,EAAE,CAAC;AAC7B,aAAO;AACP,SAAK,EAAC,CAAC;AACP,QACI,SAAS,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;AAChC,KAAG;AACH;AACO;AAA2B;AACd;AAAmB;AAAQ,IAD7C,MAAM,CAAC,QAAa,EAAE,IAAU;AAClC,QAAI,IAAI,OAAO,QAAQ,KAAK,QAAQ,IAAI,SAAS,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;AAC3E,YAAM,OAAO,IAAI,eAAe,CACxB,SAAS,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,CAClC,CAAC,YAAY,EAAE,CAAC;AACvB,SAAK;AACL,QACI,OAAO,KAAK,CAAC,MAAM,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;AACxC,KAAG;AACH;AACO;AACE;AACP,IAFA,UAAU;AACZ;AAEA,KADG;AACH;AACO;AACD;AAAQ,IADZ,aAAa;AACf;AAEA,KADG;AACH;AAEC;AACE;AACa;AACX,IADH,YAAY;AACd,QAAI,IAAI,CAAC,QAAQ,uCAAO,IAAI,CAAC,SAAS,KAAS,CAAC;AAChD,KAAG;AACH;;2FAAC;AAzGQ,mBAAS,GAAG,IAAI,GAAG,EAKvB,CAAC,AANJ;AAAC;kBADF,UAAU,5BACW;AACV,YAjBH,SAAS;AAAI,YARpB,cAAc;AACd,YACA,cAAc;AACd,4CAoCG,MAAM,SAAC,aAAa;AAAS,wCAC7B,MAAM,SAAC,cAAc;AAAQ;;;;;;;;;kCAAE;AAAC;AAAC;AAAI;AAE/B;AAGA;AClDX,MAKa,kBAAmB,SAAQ,eAEvC;AACD,IAAE;AACF,QAAI,KAAK;AAAM;AAGZ;AAAY,QAHL,MAAM,SAAS,EAAC,CAAC;AAC3B,KAAG;AACH;AACK;AACH;AAGD;AAAQ,IAJP,UAAU,CAAC,OAAY;AACzB;AAEA,KADG;AACH;AACO;AACJ;AAGF;AAAQ,IAJP,WAAW,CAAC,OAAY;AAC1B;AAEA,KADG;AACH;8CAfC,UAAU;sHACT;AAAC;AAAmB;;;gDACZ;AAAC;AAAC;AAAI;AAGd;AAQG;AChBL;AAAI;AAAe;AAAsB;AAEpC;AAgBL,SAAgB,gBAAgB,CAC9B,SAA6B,EAAE;AAC9B,IACD,OAAO;AACT,QAAI,cAAc;AAClB,QAAI,SAAS;AACb,QAAI,EAAE,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,MAAM,CAAC,YAAY,IAAI,EAAE,EAAE;AACnE,QAAI,EAAE,OAAO,EAAE,cAAc,EAAE,QAAQ,EAAE,MAAM,CAAC,SAAS,EAAE;AAC3D,QAAI,EAAE,OAAO,EAAE,eAAe,EAAE,QAAQ,EAAE,SAAS,EAAE;AACrD,QAAI,EAAE,OAAO,EAAE,cAAc,EAAE,QAAQ,EAAE,kBAAkB,EAAE;AAC7D,QAAI,EAAE,OAAO,EAAE,KAAK,EAAE,QAAQ,EAAE,SAAS,EAAE;AAC3C,KAAG,CAAC;AACJ,CAAC;AACD;AACA;AAAI;AAAkC;AAG5B;AAAI;ACpCd;AACA;AACA,GAAG;AACH;AACA;AAEsG","sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable()\nexport class MockState<T extends {}> extends BehaviorSubject<T> {\n  constructor() {\n    super(<T>{});\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\nexport const MOCK_SELECTORS = new InjectionToken('@ngrx/store Mock Selectors');\n","import { Inject, Injectable } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport {\n  Action,\n  ActionsSubject,\n  INITIAL_STATE,\n  ReducerManager,\n  Store,\n  createSelector,\n  MemoizedSelectorWithProps,\n  MemoizedSelector,\n} from '@ngrx/store';\nimport { MockState } from './mock_state';\nimport { MockSelector } from './mock_selector';\nimport { MOCK_SELECTORS } from './tokens';\n\nif (typeof afterEach === 'function') {\n  afterEach(() => {\n    try {\n      const store = TestBed.get(Store) as MockStore<any>;\n      if (store && 'resetSelectors' in store) {\n        store.resetSelectors();\n      }\n    } catch {}\n  });\n}\n\n@Injectable()\nexport class MockStore<T> extends Store<T> {\n  static selectors = new Map<\n    | string\n    | MemoizedSelector<any, any>\n    | MemoizedSelectorWithProps<any, any, any>,\n    any\n  >();\n\n  public scannedActions$: Observable<Action>;\n  private lastState: T;\n\n  constructor(\n    private state$: MockState<T>,\n    actionsObserver: ActionsSubject,\n    reducerManager: ReducerManager,\n    @Inject(INITIAL_STATE) private initialState: T,\n    @Inject(MOCK_SELECTORS) mockSelectors?: MockSelector[]\n  ) {\n    super(state$, actionsObserver, reducerManager);\n    this.resetSelectors();\n    this.setState(this.initialState);\n    this.scannedActions$ = actionsObserver.asObservable();\n    if (mockSelectors) {\n      mockSelectors.forEach(mockSelector => {\n        const selector = mockSelector.selector;\n        if (typeof selector === 'string') {\n          this.overrideSelector(selector, mockSelector.value);\n        } else {\n          this.overrideSelector(selector, mockSelector.value);\n        }\n      });\n    }\n  }\n\n  setState(nextState: T): void {\n    this.state$.next(nextState);\n    this.lastState = nextState;\n  }\n\n  overrideSelector<T, Result>(\n    selector: string,\n    value: Result\n  ): MemoizedSelector<string, Result>;\n  overrideSelector<T, Result>(\n    selector: MemoizedSelector<T, Result>,\n    value: Result\n  ): MemoizedSelector<T, Result>;\n  overrideSelector<T, Result>(\n    selector: MemoizedSelectorWithProps<T, any, Result>,\n    value: Result\n  ): MemoizedSelectorWithProps<T, any, Result>;\n  overrideSelector<T, Result>(\n    selector:\n      | string\n      | MemoizedSelector<any, any>\n      | MemoizedSelectorWithProps<any, any, any>,\n    value: any\n  ) {\n    MockStore.selectors.set(selector, value);\n\n    if (typeof selector === 'string') {\n      const stringSelector = createSelector(() => {}, () => value);\n\n      return stringSelector;\n    }\n\n    selector.setResult(value);\n\n    return selector;\n  }\n\n  resetSelectors() {\n    MockStore.selectors.forEach((_, selector) => {\n      if (typeof selector !== 'string') {\n        selector.release();\n        selector.setResult();\n      }\n    });\n\n    MockStore.selectors.clear();\n  }\n\n  select(selector: any, prop?: any) {\n    if (typeof selector === 'string' && MockStore.selectors.has(selector)) {\n      return new BehaviorSubject<any>(\n        MockStore.selectors.get(selector)\n      ).asObservable();\n    }\n\n    return super.select(selector, prop);\n  }\n\n  addReducer() {\n    /* noop */\n  }\n\n  removeReducer() {\n    /* noop */\n  }\n\n  /**\n   * Refreshes the existing state.\n   */\n  refreshState() {\n    this.setState({ ...(this.lastState as T) });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { ActionReducer } from '@ngrx/store';\n\n@Injectable()\nexport class MockReducerManager extends BehaviorSubject<\n  ActionReducer<any, any>\n> {\n  constructor() {\n    super(() => undefined);\n  }\n  \n  addFeature(feature: any) {\n    /* noop */\n  }\n\n  addFeatures(feature: any) {\n    /* noop */\n  }\n}\n","import { Provider } from '@angular/core';\nimport { MockState } from './mock_state';\nimport {\n  ActionsSubject,\n  INITIAL_STATE,\n  ReducerManager,\n  StateObservable,\n  Store,\n} from '@ngrx/store';\nimport { MockStore } from './mock_store';\nimport { MockReducerManager } from './mock_reducer_manager';\nimport { MockSelector } from './mock_selector';\nimport { MOCK_SELECTORS } from './tokens';\n\nexport interface MockStoreConfig<T> {\n  initialState?: T;\n  selectors?: MockSelector[];\n}\n\nexport function provideMockStore<T = any>(\n  config: MockStoreConfig<T> = {}\n): Provider[] {\n  return [\n    ActionsSubject,\n    MockState,\n    { provide: INITIAL_STATE, useValue: config.initialState || {} },\n    { provide: MOCK_SELECTORS, useValue: config.selectors },\n    { provide: StateObservable, useClass: MockState },\n    { provide: ReducerManager, useClass: MockReducerManager },\n    { provide: Store, useClass: MockStore },\n  ];\n}\n\nexport { MockReducerManager } from './mock_reducer_manager';\nexport { MockState } from './mock_state';\nexport { MockStore } from './mock_store';\nexport { MockSelector } from './mock_selector';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {MOCK_SELECTORS as Éµngrx_modules_store_testing_testing_a} from './src/tokens';"]}