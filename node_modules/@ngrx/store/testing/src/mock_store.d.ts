import { Observable } from 'rxjs';
import { Action, ActionsSubject, ReducerManager, Store, MemoizedSelectorWithProps, MemoizedSelector } from '@ngrx/store';
import { MockState } from './mock_state';
import { MockSelector } from './mock_selector';
import * as ɵngcc0 from '@angular/core';
export declare class MockStore<T> extends Store<T> {
    private state$;
    private initialState;
    static selectors: Map<string | MemoizedSelector<any, any, import("@ngrx/store").DefaultProjectorFn<any>> | MemoizedSelectorWithProps<any, any, any, import("@ngrx/store").DefaultProjectorFn<any>>, any>;
    scannedActions$: Observable<Action>;
    private lastState;
    constructor(state$: MockState<T>, actionsObserver: ActionsSubject, reducerManager: ReducerManager, initialState: T, mockSelectors?: MockSelector[]);
    setState(nextState: T): void;
    overrideSelector<T, Result>(selector: string, value: Result): MemoizedSelector<string, Result>;
    overrideSelector<T, Result>(selector: MemoizedSelector<T, Result>, value: Result): MemoizedSelector<T, Result>;
    overrideSelector<T, Result>(selector: MemoizedSelectorWithProps<T, any, Result>, value: Result): MemoizedSelectorWithProps<T, any, Result>;
    resetSelectors(): void;
    select(selector: any, prop?: any): Observable<any>;
    addReducer(): void;
    removeReducer(): void;
    /**
     * Refreshes the existing state.
     */
    refreshState(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MockStore<any>, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<MockStore<any>>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9ja19zdG9yZS5kLnRzIiwic291cmNlcyI6WyJtb2NrX3N0b3JlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQWN0aW9uLCBBY3Rpb25zU3ViamVjdCwgUmVkdWNlck1hbmFnZXIsIFN0b3JlLCBNZW1vaXplZFNlbGVjdG9yV2l0aFByb3BzLCBNZW1vaXplZFNlbGVjdG9yIH0gZnJvbSAnQG5ncngvc3RvcmUnO1xuaW1wb3J0IHsgTW9ja1N0YXRlIH0gZnJvbSAnLi9tb2NrX3N0YXRlJztcbmltcG9ydCB7IE1vY2tTZWxlY3RvciB9IGZyb20gJy4vbW9ja19zZWxlY3Rvcic7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBNb2NrU3RvcmU8VD4gZXh0ZW5kcyBTdG9yZTxUPiB7XG4gICAgcHJpdmF0ZSBzdGF0ZSQ7XG4gICAgcHJpdmF0ZSBpbml0aWFsU3RhdGU7XG4gICAgc3RhdGljIHNlbGVjdG9yczogTWFwPHN0cmluZyB8IE1lbW9pemVkU2VsZWN0b3I8YW55LCBhbnksIGltcG9ydChcIkBuZ3J4L3N0b3JlXCIpLkRlZmF1bHRQcm9qZWN0b3JGbjxhbnk+PiB8IE1lbW9pemVkU2VsZWN0b3JXaXRoUHJvcHM8YW55LCBhbnksIGFueSwgaW1wb3J0KFwiQG5ncngvc3RvcmVcIikuRGVmYXVsdFByb2plY3RvckZuPGFueT4+LCBhbnk+O1xuICAgIHNjYW5uZWRBY3Rpb25zJDogT2JzZXJ2YWJsZTxBY3Rpb24+O1xuICAgIHByaXZhdGUgbGFzdFN0YXRlO1xuICAgIGNvbnN0cnVjdG9yKHN0YXRlJDogTW9ja1N0YXRlPFQ+LCBhY3Rpb25zT2JzZXJ2ZXI6IEFjdGlvbnNTdWJqZWN0LCByZWR1Y2VyTWFuYWdlcjogUmVkdWNlck1hbmFnZXIsIGluaXRpYWxTdGF0ZTogVCwgbW9ja1NlbGVjdG9ycz86IE1vY2tTZWxlY3RvcltdKTtcbiAgICBzZXRTdGF0ZShuZXh0U3RhdGU6IFQpOiB2b2lkO1xuICAgIG92ZXJyaWRlU2VsZWN0b3I8VCwgUmVzdWx0PihzZWxlY3Rvcjogc3RyaW5nLCB2YWx1ZTogUmVzdWx0KTogTWVtb2l6ZWRTZWxlY3RvcjxzdHJpbmcsIFJlc3VsdD47XG4gICAgb3ZlcnJpZGVTZWxlY3RvcjxULCBSZXN1bHQ+KHNlbGVjdG9yOiBNZW1vaXplZFNlbGVjdG9yPFQsIFJlc3VsdD4sIHZhbHVlOiBSZXN1bHQpOiBNZW1vaXplZFNlbGVjdG9yPFQsIFJlc3VsdD47XG4gICAgb3ZlcnJpZGVTZWxlY3RvcjxULCBSZXN1bHQ+KHNlbGVjdG9yOiBNZW1vaXplZFNlbGVjdG9yV2l0aFByb3BzPFQsIGFueSwgUmVzdWx0PiwgdmFsdWU6IFJlc3VsdCk6IE1lbW9pemVkU2VsZWN0b3JXaXRoUHJvcHM8VCwgYW55LCBSZXN1bHQ+O1xuICAgIHJlc2V0U2VsZWN0b3JzKCk6IHZvaWQ7XG4gICAgc2VsZWN0KHNlbGVjdG9yOiBhbnksIHByb3A/OiBhbnkpOiBPYnNlcnZhYmxlPGFueT47XG4gICAgYWRkUmVkdWNlcigpOiB2b2lkO1xuICAgIHJlbW92ZVJlZHVjZXIoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBSZWZyZXNoZXMgdGhlIGV4aXN0aW5nIHN0YXRlLlxuICAgICAqL1xuICAgIHJlZnJlc2hTdGF0ZSgpOiB2b2lkO1xufVxuIl19