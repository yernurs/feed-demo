import { ErrorHandler } from '@angular/core';
import { Action, ActionsSubject, ReducerObservable, ScannedActionsSubject } from '@ngrx/store';
import { Observable, Observer } from 'rxjs';
import { StoreDevtoolsConfig } from './config';
import { DevtoolsExtension } from './extension';
import { LiftedState } from './reducer';
import { DevtoolsDispatcher } from './devtools-dispatcher';
import * as ɵngcc0 from '@angular/core';
export declare class StoreDevtools implements Observer<any> {
    private stateSubscription;
    private extensionStartSubscription;
    dispatcher: ActionsSubject;
    liftedState: Observable<LiftedState>;
    state: Observable<any>;
    constructor(dispatcher: DevtoolsDispatcher, actions$: ActionsSubject, reducers$: ReducerObservable, extension: DevtoolsExtension, scannedActions: ScannedActionsSubject, errorHandler: ErrorHandler, initialState: any, config: StoreDevtoolsConfig);
    dispatch(action: Action): void;
    next(action: any): void;
    error(error: any): void;
    complete(): void;
    performAction(action: any): void;
    refresh(): void;
    reset(): void;
    rollback(): void;
    commit(): void;
    sweep(): void;
    toggleAction(id: number): void;
    jumpToAction(actionId: number): void;
    jumpToState(index: number): void;
    importState(nextLiftedState: any): void;
    lockChanges(status: boolean): void;
    pauseRecording(status: boolean): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<StoreDevtools, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<StoreDevtools>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2dG9vbHMuZC50cyIsInNvdXJjZXMiOlsiZGV2dG9vbHMuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVycm9ySGFuZGxlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWN0aW9uLCBBY3Rpb25zU3ViamVjdCwgUmVkdWNlck9ic2VydmFibGUsIFNjYW5uZWRBY3Rpb25zU3ViamVjdCB9IGZyb20gJ0BuZ3J4L3N0b3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIE9ic2VydmVyIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBTdG9yZURldnRvb2xzQ29uZmlnIH0gZnJvbSAnLi9jb25maWcnO1xuaW1wb3J0IHsgRGV2dG9vbHNFeHRlbnNpb24gfSBmcm9tICcuL2V4dGVuc2lvbic7XG5pbXBvcnQgeyBMaWZ0ZWRTdGF0ZSB9IGZyb20gJy4vcmVkdWNlcic7XG5pbXBvcnQgeyBEZXZ0b29sc0Rpc3BhdGNoZXIgfSBmcm9tICcuL2RldnRvb2xzLWRpc3BhdGNoZXInO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgU3RvcmVEZXZ0b29scyBpbXBsZW1lbnRzIE9ic2VydmVyPGFueT4ge1xuICAgIHByaXZhdGUgc3RhdGVTdWJzY3JpcHRpb247XG4gICAgcHJpdmF0ZSBleHRlbnNpb25TdGFydFN1YnNjcmlwdGlvbjtcbiAgICBkaXNwYXRjaGVyOiBBY3Rpb25zU3ViamVjdDtcbiAgICBsaWZ0ZWRTdGF0ZTogT2JzZXJ2YWJsZTxMaWZ0ZWRTdGF0ZT47XG4gICAgc3RhdGU6IE9ic2VydmFibGU8YW55PjtcbiAgICBjb25zdHJ1Y3RvcihkaXNwYXRjaGVyOiBEZXZ0b29sc0Rpc3BhdGNoZXIsIGFjdGlvbnMkOiBBY3Rpb25zU3ViamVjdCwgcmVkdWNlcnMkOiBSZWR1Y2VyT2JzZXJ2YWJsZSwgZXh0ZW5zaW9uOiBEZXZ0b29sc0V4dGVuc2lvbiwgc2Nhbm5lZEFjdGlvbnM6IFNjYW5uZWRBY3Rpb25zU3ViamVjdCwgZXJyb3JIYW5kbGVyOiBFcnJvckhhbmRsZXIsIGluaXRpYWxTdGF0ZTogYW55LCBjb25maWc6IFN0b3JlRGV2dG9vbHNDb25maWcpO1xuICAgIGRpc3BhdGNoKGFjdGlvbjogQWN0aW9uKTogdm9pZDtcbiAgICBuZXh0KGFjdGlvbjogYW55KTogdm9pZDtcbiAgICBlcnJvcihlcnJvcjogYW55KTogdm9pZDtcbiAgICBjb21wbGV0ZSgpOiB2b2lkO1xuICAgIHBlcmZvcm1BY3Rpb24oYWN0aW9uOiBhbnkpOiB2b2lkO1xuICAgIHJlZnJlc2goKTogdm9pZDtcbiAgICByZXNldCgpOiB2b2lkO1xuICAgIHJvbGxiYWNrKCk6IHZvaWQ7XG4gICAgY29tbWl0KCk6IHZvaWQ7XG4gICAgc3dlZXAoKTogdm9pZDtcbiAgICB0b2dnbGVBY3Rpb24oaWQ6IG51bWJlcik6IHZvaWQ7XG4gICAganVtcFRvQWN0aW9uKGFjdGlvbklkOiBudW1iZXIpOiB2b2lkO1xuICAgIGp1bXBUb1N0YXRlKGluZGV4OiBudW1iZXIpOiB2b2lkO1xuICAgIGltcG9ydFN0YXRlKG5leHRMaWZ0ZWRTdGF0ZTogYW55KTogdm9pZDtcbiAgICBsb2NrQ2hhbmdlcyhzdGF0dXM6IGJvb2xlYW4pOiB2b2lkO1xuICAgIHBhdXNlUmVjb3JkaW5nKHN0YXR1czogYm9vbGVhbik6IHZvaWQ7XG59XG4iXX0=