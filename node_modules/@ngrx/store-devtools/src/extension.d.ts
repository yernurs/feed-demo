import { InjectionToken } from '@angular/core';
import { Observable } from 'rxjs';
import { SerializationOptions, StoreDevtoolsConfig } from './config';
import { DevtoolsDispatcher } from './devtools-dispatcher';
import { LiftedAction, LiftedState } from './reducer';
import * as ɵngcc0 from '@angular/core';
export declare const ExtensionActionTypes: {
    START: string;
    DISPATCH: string;
    STOP: string;
    ACTION: string;
};
export declare const REDUX_DEVTOOLS_EXTENSION: InjectionToken<ReduxDevtoolsExtension>;
export interface ReduxDevtoolsExtensionConnection {
    subscribe(listener: (change: any) => void): void;
    unsubscribe(): void;
    send(action: any, state: any): void;
    init(state?: any): void;
    error(anyErr: any): void;
}
export interface ReduxDevtoolsExtensionConfig {
    features?: object | boolean;
    name: string | undefined;
    maxAge?: number;
    serialize?: boolean | SerializationOptions;
}
export interface ReduxDevtoolsExtension {
    connect(options: ReduxDevtoolsExtensionConfig): ReduxDevtoolsExtensionConnection;
    send(action: any, state: any, options: ReduxDevtoolsExtensionConfig): void;
}
export declare class DevtoolsExtension {
    private config;
    private dispatcher;
    private devtoolsExtension;
    private extensionConnection;
    liftedActions$: Observable<any>;
    actions$: Observable<any>;
    start$: Observable<any>;
    constructor(devtoolsExtension: ReduxDevtoolsExtension, config: StoreDevtoolsConfig, dispatcher: DevtoolsDispatcher);
    notify(action: LiftedAction, state: LiftedState): void;
    private createChangesObservable;
    private createActionStreams;
    private unwrapAction;
    private getExtensionConfig;
    private sendToReduxDevtools;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DevtoolsExtension, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<DevtoolsExtension>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0ZW5zaW9uLmQudHMiLCJzb3VyY2VzIjpbImV4dGVuc2lvbi5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGlvblRva2VuIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBTZXJpYWxpemF0aW9uT3B0aW9ucywgU3RvcmVEZXZ0b29sc0NvbmZpZyB9IGZyb20gJy4vY29uZmlnJztcbmltcG9ydCB7IERldnRvb2xzRGlzcGF0Y2hlciB9IGZyb20gJy4vZGV2dG9vbHMtZGlzcGF0Y2hlcic7XG5pbXBvcnQgeyBMaWZ0ZWRBY3Rpb24sIExpZnRlZFN0YXRlIH0gZnJvbSAnLi9yZWR1Y2VyJztcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IEV4dGVuc2lvbkFjdGlvblR5cGVzOiB7XG4gICAgU1RBUlQ6IHN0cmluZztcbiAgICBESVNQQVRDSDogc3RyaW5nO1xuICAgIFNUT1A6IHN0cmluZztcbiAgICBBQ1RJT046IHN0cmluZztcbn07XG5leHBvcnQgZGVjbGFyZSBjb25zdCBSRURVWF9ERVZUT09MU19FWFRFTlNJT046IEluamVjdGlvblRva2VuPFJlZHV4RGV2dG9vbHNFeHRlbnNpb24+O1xuZXhwb3J0IGludGVyZmFjZSBSZWR1eERldnRvb2xzRXh0ZW5zaW9uQ29ubmVjdGlvbiB7XG4gICAgc3Vic2NyaWJlKGxpc3RlbmVyOiAoY2hhbmdlOiBhbnkpID0+IHZvaWQpOiB2b2lkO1xuICAgIHVuc3Vic2NyaWJlKCk6IHZvaWQ7XG4gICAgc2VuZChhY3Rpb246IGFueSwgc3RhdGU6IGFueSk6IHZvaWQ7XG4gICAgaW5pdChzdGF0ZT86IGFueSk6IHZvaWQ7XG4gICAgZXJyb3IoYW55RXJyOiBhbnkpOiB2b2lkO1xufVxuZXhwb3J0IGludGVyZmFjZSBSZWR1eERldnRvb2xzRXh0ZW5zaW9uQ29uZmlnIHtcbiAgICBmZWF0dXJlcz86IG9iamVjdCB8IGJvb2xlYW47XG4gICAgbmFtZTogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICAgIG1heEFnZT86IG51bWJlcjtcbiAgICBzZXJpYWxpemU/OiBib29sZWFuIHwgU2VyaWFsaXphdGlvbk9wdGlvbnM7XG59XG5leHBvcnQgaW50ZXJmYWNlIFJlZHV4RGV2dG9vbHNFeHRlbnNpb24ge1xuICAgIGNvbm5lY3Qob3B0aW9uczogUmVkdXhEZXZ0b29sc0V4dGVuc2lvbkNvbmZpZyk6IFJlZHV4RGV2dG9vbHNFeHRlbnNpb25Db25uZWN0aW9uO1xuICAgIHNlbmQoYWN0aW9uOiBhbnksIHN0YXRlOiBhbnksIG9wdGlvbnM6IFJlZHV4RGV2dG9vbHNFeHRlbnNpb25Db25maWcpOiB2b2lkO1xufVxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgRGV2dG9vbHNFeHRlbnNpb24ge1xuICAgIHByaXZhdGUgY29uZmlnO1xuICAgIHByaXZhdGUgZGlzcGF0Y2hlcjtcbiAgICBwcml2YXRlIGRldnRvb2xzRXh0ZW5zaW9uO1xuICAgIHByaXZhdGUgZXh0ZW5zaW9uQ29ubmVjdGlvbjtcbiAgICBsaWZ0ZWRBY3Rpb25zJDogT2JzZXJ2YWJsZTxhbnk+O1xuICAgIGFjdGlvbnMkOiBPYnNlcnZhYmxlPGFueT47XG4gICAgc3RhcnQkOiBPYnNlcnZhYmxlPGFueT47XG4gICAgY29uc3RydWN0b3IoZGV2dG9vbHNFeHRlbnNpb246IFJlZHV4RGV2dG9vbHNFeHRlbnNpb24sIGNvbmZpZzogU3RvcmVEZXZ0b29sc0NvbmZpZywgZGlzcGF0Y2hlcjogRGV2dG9vbHNEaXNwYXRjaGVyKTtcbiAgICBub3RpZnkoYWN0aW9uOiBMaWZ0ZWRBY3Rpb24sIHN0YXRlOiBMaWZ0ZWRTdGF0ZSk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBjcmVhdGVDaGFuZ2VzT2JzZXJ2YWJsZTtcbiAgICBwcml2YXRlIGNyZWF0ZUFjdGlvblN0cmVhbXM7XG4gICAgcHJpdmF0ZSB1bndyYXBBY3Rpb247XG4gICAgcHJpdmF0ZSBnZXRFeHRlbnNpb25Db25maWc7XG4gICAgcHJpdmF0ZSBzZW5kVG9SZWR1eERldnRvb2xzO1xufVxuIl19