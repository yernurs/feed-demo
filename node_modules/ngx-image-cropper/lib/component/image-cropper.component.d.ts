import { ChangeDetectorRef, ElementRef, EventEmitter, OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { DomSanitizer, SafeStyle, SafeUrl } from '@angular/platform-browser';
import { HttpClient } from '@angular/common/http';
import { CropperPosition, Dimensions, ImageCroppedEvent, ImageTransform } from '../interfaces';
import { MoveTypes } from '../interfaces/move-start.interface';
import * as ɵngcc0 from '@angular/core';
export declare class ImageCropperComponent implements OnChanges, OnInit {
    private sanitizer;
    private cd;
    private http;
    private Hammer;
    private originalImage;
    private transformedImage;
    private originalBase64;
    private transformedBase64;
    private moveStart;
    private originalSize;
    private transformedSize;
    private setImageMaxSizeRetries;
    private cropperScaledMinWidth;
    private cropperScaledMinHeight;
    private exifTransform;
    private stepSize;
    safeImgDataUrl: SafeUrl | string;
    safeTransformStyle: SafeStyle | string;
    marginLeft: SafeStyle | string;
    maxSize: Dimensions;
    imageVisible: boolean;
    moveTypes: typeof MoveTypes;
    wrapper: ElementRef;
    sourceImage: ElementRef;
    imageChangedEvent: any;
    imageURL: string;
    imageBase64: string;
    imageFile: File;
    format: 'png' | 'jpeg' | 'bmp' | 'webp' | 'ico';
    maintainAspectRatio: boolean;
    transform: ImageTransform;
    aspectRatio: number;
    resizeToWidth: number;
    resizeToHeight: number;
    cropperMinWidth: number;
    cropperMinHeight: number;
    canvasRotation: number;
    initialStepSize: number;
    roundCropper: boolean;
    onlyScaleDown: boolean;
    imageQuality: number;
    autoCrop: boolean;
    backgroundColor: string;
    containWithinAspectRatio: boolean;
    hideResizeSquares: boolean;
    cropper: CropperPosition;
    alignImage: 'left' | 'center';
    disabled: boolean;
    imageCropped: EventEmitter<ImageCroppedEvent>;
    startCropImage: EventEmitter<void>;
    imageLoaded: EventEmitter<void>;
    cropperReady: EventEmitter<Dimensions>;
    loadImageFailed: EventEmitter<void>;
    constructor(sanitizer: DomSanitizer, cd: ChangeDetectorRef, http: HttpClient);
    ngOnChanges(changes: SimpleChanges): void;
    private loadImageOnChanges;
    private setCssTransform;
    ngOnInit(): void;
    private initCropper;
    private loadImage;
    private loadImageFile;
    private isValidImageType;
    private checkExifAndLoadBase64Image;
    private loadImageFromURL;
    private getTransformedSize;
    private transformOriginalImage;
    private transformImageBase64;
    private setTransformedImage;
    imageLoadedInView(): void;
    private checkImageMaxSizeRecursively;
    private sourceImageLoaded;
    onResize(): void;
    private activatePinchGesture;
    private resizeCropperPosition;
    resetCropperPosition(): void;
    keyboardAccess(event: any): void;
    private changeKeyboardStepSize;
    private keyboardMoveCropper;
    private getPositionForKey;
    private getInvertedPositionForKey;
    private getEventForKey;
    startMove(event: any, moveType: MoveTypes, position?: string | null): void;
    startPinch(event: any): void;
    moveImg(event: any): void;
    onPinch(event: any): void;
    private setMaxSize;
    private setCropperScaledMinSize;
    private setCropperScaledMinWidth;
    private setCropperScaledMinHeight;
    private checkCropperPosition;
    moveStop(): void;
    pinchStop(): void;
    private move;
    private resize;
    private checkAspectRatio;
    private doAutoCrop;
    crop(): ImageCroppedEvent | null;
    private getImagePosition;
    private getOffsetImagePosition;
    private cropToBase64;
    private getQuality;
    private getResizeRatio;
    private getClientX;
    private getClientY;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ImageCropperComponent, [null, null, { optional: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ImageCropperComponent, "image-cropper", never, { "format": "format"; "maintainAspectRatio": "maintainAspectRatio"; "transform": "transform"; "aspectRatio": "aspectRatio"; "resizeToWidth": "resizeToWidth"; "resizeToHeight": "resizeToHeight"; "cropperMinWidth": "cropperMinWidth"; "cropperMinHeight": "cropperMinHeight"; "canvasRotation": "canvasRotation"; "initialStepSize": "initialStepSize"; "roundCropper": "roundCropper"; "onlyScaleDown": "onlyScaleDown"; "imageQuality": "imageQuality"; "autoCrop": "autoCrop"; "containWithinAspectRatio": "containWithinAspectRatio"; "hideResizeSquares": "hideResizeSquares"; "cropper": "cropper"; "alignImage": "alignImage"; "disabled": "disabled"; "imageChangedEvent": "imageChangedEvent"; "imageURL": "imageURL"; "imageBase64": "imageBase64"; "imageFile": "imageFile"; "backgroundColor": "backgroundColor"; }, { "imageCropped": "imageCropped"; "startCropImage": "startCropImage"; "imageLoaded": "imageLoaded"; "cropperReady": "cropperReady"; "loadImageFailed": "loadImageFailed"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2UtY3JvcHBlci5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiaW1hZ2UtY3JvcHBlci5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3RvclJlZiwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBPbkNoYW5nZXMsIE9uSW5pdCwgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRG9tU2FuaXRpemVyLCBTYWZlU3R5bGUsIFNhZmVVcmwgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcbmltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBDcm9wcGVyUG9zaXRpb24sIERpbWVuc2lvbnMsIEltYWdlQ3JvcHBlZEV2ZW50LCBJbWFnZVRyYW5zZm9ybSB9IGZyb20gJy4uL2ludGVyZmFjZXMnO1xuaW1wb3J0IHsgTW92ZVR5cGVzIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9tb3ZlLXN0YXJ0LmludGVyZmFjZSc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBJbWFnZUNyb3BwZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMsIE9uSW5pdCB7XG4gICAgcHJpdmF0ZSBzYW5pdGl6ZXI7XG4gICAgcHJpdmF0ZSBjZDtcbiAgICBwcml2YXRlIGh0dHA7XG4gICAgcHJpdmF0ZSBIYW1tZXI7XG4gICAgcHJpdmF0ZSBvcmlnaW5hbEltYWdlO1xuICAgIHByaXZhdGUgdHJhbnNmb3JtZWRJbWFnZTtcbiAgICBwcml2YXRlIG9yaWdpbmFsQmFzZTY0O1xuICAgIHByaXZhdGUgdHJhbnNmb3JtZWRCYXNlNjQ7XG4gICAgcHJpdmF0ZSBtb3ZlU3RhcnQ7XG4gICAgcHJpdmF0ZSBvcmlnaW5hbFNpemU7XG4gICAgcHJpdmF0ZSB0cmFuc2Zvcm1lZFNpemU7XG4gICAgcHJpdmF0ZSBzZXRJbWFnZU1heFNpemVSZXRyaWVzO1xuICAgIHByaXZhdGUgY3JvcHBlclNjYWxlZE1pbldpZHRoO1xuICAgIHByaXZhdGUgY3JvcHBlclNjYWxlZE1pbkhlaWdodDtcbiAgICBwcml2YXRlIGV4aWZUcmFuc2Zvcm07XG4gICAgcHJpdmF0ZSBzdGVwU2l6ZTtcbiAgICBzYWZlSW1nRGF0YVVybDogU2FmZVVybCB8IHN0cmluZztcbiAgICBzYWZlVHJhbnNmb3JtU3R5bGU6IFNhZmVTdHlsZSB8IHN0cmluZztcbiAgICBtYXJnaW5MZWZ0OiBTYWZlU3R5bGUgfCBzdHJpbmc7XG4gICAgbWF4U2l6ZTogRGltZW5zaW9ucztcbiAgICBpbWFnZVZpc2libGU6IGJvb2xlYW47XG4gICAgbW92ZVR5cGVzOiB0eXBlb2YgTW92ZVR5cGVzO1xuICAgIHdyYXBwZXI6IEVsZW1lbnRSZWY7XG4gICAgc291cmNlSW1hZ2U6IEVsZW1lbnRSZWY7XG4gICAgaW1hZ2VDaGFuZ2VkRXZlbnQ6IGFueTtcbiAgICBpbWFnZVVSTDogc3RyaW5nO1xuICAgIGltYWdlQmFzZTY0OiBzdHJpbmc7XG4gICAgaW1hZ2VGaWxlOiBGaWxlO1xuICAgIGZvcm1hdDogJ3BuZycgfCAnanBlZycgfCAnYm1wJyB8ICd3ZWJwJyB8ICdpY28nO1xuICAgIG1haW50YWluQXNwZWN0UmF0aW86IGJvb2xlYW47XG4gICAgdHJhbnNmb3JtOiBJbWFnZVRyYW5zZm9ybTtcbiAgICBhc3BlY3RSYXRpbzogbnVtYmVyO1xuICAgIHJlc2l6ZVRvV2lkdGg6IG51bWJlcjtcbiAgICByZXNpemVUb0hlaWdodDogbnVtYmVyO1xuICAgIGNyb3BwZXJNaW5XaWR0aDogbnVtYmVyO1xuICAgIGNyb3BwZXJNaW5IZWlnaHQ6IG51bWJlcjtcbiAgICBjYW52YXNSb3RhdGlvbjogbnVtYmVyO1xuICAgIGluaXRpYWxTdGVwU2l6ZTogbnVtYmVyO1xuICAgIHJvdW5kQ3JvcHBlcjogYm9vbGVhbjtcbiAgICBvbmx5U2NhbGVEb3duOiBib29sZWFuO1xuICAgIGltYWdlUXVhbGl0eTogbnVtYmVyO1xuICAgIGF1dG9Dcm9wOiBib29sZWFuO1xuICAgIGJhY2tncm91bmRDb2xvcjogc3RyaW5nO1xuICAgIGNvbnRhaW5XaXRoaW5Bc3BlY3RSYXRpbzogYm9vbGVhbjtcbiAgICBoaWRlUmVzaXplU3F1YXJlczogYm9vbGVhbjtcbiAgICBjcm9wcGVyOiBDcm9wcGVyUG9zaXRpb247XG4gICAgYWxpZ25JbWFnZTogJ2xlZnQnIHwgJ2NlbnRlcic7XG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgaW1hZ2VDcm9wcGVkOiBFdmVudEVtaXR0ZXI8SW1hZ2VDcm9wcGVkRXZlbnQ+O1xuICAgIHN0YXJ0Q3JvcEltYWdlOiBFdmVudEVtaXR0ZXI8dm9pZD47XG4gICAgaW1hZ2VMb2FkZWQ6IEV2ZW50RW1pdHRlcjx2b2lkPjtcbiAgICBjcm9wcGVyUmVhZHk6IEV2ZW50RW1pdHRlcjxEaW1lbnNpb25zPjtcbiAgICBsb2FkSW1hZ2VGYWlsZWQ6IEV2ZW50RW1pdHRlcjx2b2lkPjtcbiAgICBjb25zdHJ1Y3RvcihzYW5pdGl6ZXI6IERvbVNhbml0aXplciwgY2Q6IENoYW5nZURldGVjdG9yUmVmLCBodHRwOiBIdHRwQ2xpZW50KTtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICBwcml2YXRlIGxvYWRJbWFnZU9uQ2hhbmdlcztcbiAgICBwcml2YXRlIHNldENzc1RyYW5zZm9ybTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIHByaXZhdGUgaW5pdENyb3BwZXI7XG4gICAgcHJpdmF0ZSBsb2FkSW1hZ2U7XG4gICAgcHJpdmF0ZSBsb2FkSW1hZ2VGaWxlO1xuICAgIHByaXZhdGUgaXNWYWxpZEltYWdlVHlwZTtcbiAgICBwcml2YXRlIGNoZWNrRXhpZkFuZExvYWRCYXNlNjRJbWFnZTtcbiAgICBwcml2YXRlIGxvYWRJbWFnZUZyb21VUkw7XG4gICAgcHJpdmF0ZSBnZXRUcmFuc2Zvcm1lZFNpemU7XG4gICAgcHJpdmF0ZSB0cmFuc2Zvcm1PcmlnaW5hbEltYWdlO1xuICAgIHByaXZhdGUgdHJhbnNmb3JtSW1hZ2VCYXNlNjQ7XG4gICAgcHJpdmF0ZSBzZXRUcmFuc2Zvcm1lZEltYWdlO1xuICAgIGltYWdlTG9hZGVkSW5WaWV3KCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBjaGVja0ltYWdlTWF4U2l6ZVJlY3Vyc2l2ZWx5O1xuICAgIHByaXZhdGUgc291cmNlSW1hZ2VMb2FkZWQ7XG4gICAgb25SZXNpemUoKTogdm9pZDtcbiAgICBwcml2YXRlIGFjdGl2YXRlUGluY2hHZXN0dXJlO1xuICAgIHByaXZhdGUgcmVzaXplQ3JvcHBlclBvc2l0aW9uO1xuICAgIHJlc2V0Q3JvcHBlclBvc2l0aW9uKCk6IHZvaWQ7XG4gICAga2V5Ym9hcmRBY2Nlc3MoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBjaGFuZ2VLZXlib2FyZFN0ZXBTaXplO1xuICAgIHByaXZhdGUga2V5Ym9hcmRNb3ZlQ3JvcHBlcjtcbiAgICBwcml2YXRlIGdldFBvc2l0aW9uRm9yS2V5O1xuICAgIHByaXZhdGUgZ2V0SW52ZXJ0ZWRQb3NpdGlvbkZvcktleTtcbiAgICBwcml2YXRlIGdldEV2ZW50Rm9yS2V5O1xuICAgIHN0YXJ0TW92ZShldmVudDogYW55LCBtb3ZlVHlwZTogTW92ZVR5cGVzLCBwb3NpdGlvbj86IHN0cmluZyB8IG51bGwpOiB2b2lkO1xuICAgIHN0YXJ0UGluY2goZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgbW92ZUltZyhldmVudDogYW55KTogdm9pZDtcbiAgICBvblBpbmNoKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIHByaXZhdGUgc2V0TWF4U2l6ZTtcbiAgICBwcml2YXRlIHNldENyb3BwZXJTY2FsZWRNaW5TaXplO1xuICAgIHByaXZhdGUgc2V0Q3JvcHBlclNjYWxlZE1pbldpZHRoO1xuICAgIHByaXZhdGUgc2V0Q3JvcHBlclNjYWxlZE1pbkhlaWdodDtcbiAgICBwcml2YXRlIGNoZWNrQ3JvcHBlclBvc2l0aW9uO1xuICAgIG1vdmVTdG9wKCk6IHZvaWQ7XG4gICAgcGluY2hTdG9wKCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBtb3ZlO1xuICAgIHByaXZhdGUgcmVzaXplO1xuICAgIHByaXZhdGUgY2hlY2tBc3BlY3RSYXRpbztcbiAgICBwcml2YXRlIGRvQXV0b0Nyb3A7XG4gICAgY3JvcCgpOiBJbWFnZUNyb3BwZWRFdmVudCB8IG51bGw7XG4gICAgcHJpdmF0ZSBnZXRJbWFnZVBvc2l0aW9uO1xuICAgIHByaXZhdGUgZ2V0T2Zmc2V0SW1hZ2VQb3NpdGlvbjtcbiAgICBwcml2YXRlIGNyb3BUb0Jhc2U2NDtcbiAgICBwcml2YXRlIGdldFF1YWxpdHk7XG4gICAgcHJpdmF0ZSBnZXRSZXNpemVSYXRpbztcbiAgICBwcml2YXRlIGdldENsaWVudFg7XG4gICAgcHJpdmF0ZSBnZXRDbGllbnRZO1xufVxuIl19